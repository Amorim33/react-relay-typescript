{"version":3,"sources":["components/Character/__generated__/CardCharacterQuery.graphql.ts","App.tsx","index.tsx","components/relay/fetchQuery.ts","components/relay/Environment.ts","components/global/wrap.tsx","components/Character/Card.tsx"],"names":["node","v0","v1","v2","v3","hash","Home","lazy","NotFound","Character","NavigationRoutes","basepath","homepage","default","path","App","fallback","ReactDOM","render","document","getElementById","headers","Accept","fetchQuery","operation","variables","body","JSON","stringify","query","text","fetch","method","then","res","json","Environment","network","Network","create","store","Store","RecordSource","GlobalWrapper","children","environment","Card","id","useQuery","characterId","props","error","name","character","className","alt","undefined","src","image","message"],"mappings":"0JAAA,OAiCA,IAAMA,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACE,aAAgB,KAChB,KAAQ,gBACR,KAAQ,gBAGZC,EAAK,CACH,CACE,KAAQ,WACR,KAAQ,KACR,aAAgB,gBAGpBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,OACR,WAAc,MAEhBC,EAAK,CACH,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,QACR,WAAc,MAEhB,MAAO,CACL,SAAY,CACV,oBAAwBH,EACxB,KAAQ,WACR,SAAY,KACZ,KAAQ,qBACR,WAAc,CACZ,CACE,MAAS,KACT,KAASC,EACT,aAAgB,YAChB,KAAQ,cACR,KAAQ,YACR,QAAU,EACV,WAAc,CACXC,EACAC,GAEH,WAAc,OAGlB,KAAQ,QACR,YAAe,MAEjB,KAAQ,UACR,UAAa,CACX,oBAAwBH,EACxB,KAAQ,YACR,KAAQ,qBACR,WAAc,CACZ,CACE,MAAS,KACT,KAASC,EACT,aAAgB,YAChB,KAAQ,cACR,KAAQ,YACR,QAAU,EACV,WAAc,CACXC,EACAC,EACD,CACE,MAAS,KACT,KAAQ,KACR,KAAQ,cACR,KAAQ,KACR,WAAc,OAGlB,WAAc,QAIpB,OAAU,CACR,QAAW,mCACX,GAAM,KACN,SAAY,GACZ,KAAQ,qBACR,cAAiB,QACjB,KAAQ,gIAvFmB,GA2F9BJ,EAAaK,KAAO,mCACNL,a,mGCvHTM,EAAOC,gBAAM,kBAAM,iCACnBC,EAAWD,gBAAM,kBAAM,iCACvBE,EAAYF,gBAAM,kBAAM,iCAKxBG,EAAmB,kBACvB,eAAC,IAAD,CAAQC,SAAUC,IAAlB,UACE,cAACJ,EAAD,CAAUK,SAAO,IACjB,cAACP,EAAD,CAAMQ,KAAK,MACX,cAACL,EAAD,CAAWK,KAAK,+BAeLC,EARA,kBACb,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAU,6CAApB,SACE,cAAC,EAAD,SCtBNC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAgB,U,8LCCrBC,EAAU,CACdC,OAAQ,mBACR,eAAgB,oBAsBHC,EAjBI,SAAEC,EAAeC,GAClC,IAAMC,EAAOC,KAAKC,UAAW,CAC3BC,MAAOL,EAAUM,KACjBL,cAWF,OARiBM,MAfQ,sCAgBV,CACXC,OAAQ,OACRX,UACAK,SAEFO,MAAM,SAAAC,GAAG,OAAIA,EAAIC,W,OCpBN,MAAIC,cAAa,CAC9BC,QAASC,UAAQC,OAAQhB,GACzBiB,MAAO,IAAIC,QAAO,IAAIC,kBCSTC,G,OAPiC,SAAC,GAAD,IAAIC,EAAJ,EAAIA,SAAJ,OAC9C,cAAC,2BAAD,CAA0BC,YAAaT,EAAvC,SACGQ,MCTCf,OAAK,iBA+BIiB,EAhBY,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,GAAoB,EACxBC,mBAA8BnB,EAAO,CAAEoB,YAAaF,IAArEG,EADyC,EACzCA,MAAOC,EADkC,EAClCA,MAEf,GAAKD,EAAQ,CAAC,IAAD,IAELE,GAAY,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOG,WAAP,OAAmBH,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAOG,iBAA1B,aAAmB,EAAkBD,KAAO,+CACzD,OACE,gCACE,oBAAIE,UAAU,qBAAd,SAAoCF,IACpC,qBAAKG,IAAKH,QAAQI,EAAWC,KAAU,OAALP,QAAK,IAALA,GAAA,UAAAA,EAAOG,iBAAP,eAAkBK,aAASF,OAGjE,OAAKL,EAAe,8BAAMA,EAAMQ,UAC3B,gD","file":"static/js/main.32ca3b7d.chunk.js","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type CardCharacterQueryVariables = {\n    characterId: string;\n};\nexport type CardCharacterQueryResponse = {\n    readonly character: {\n        readonly name: string | null;\n        readonly image: string | null;\n    } | null;\n};\nexport type CardCharacterQuery = {\n    readonly response: CardCharacterQueryResponse;\n    readonly variables: CardCharacterQueryVariables;\n};\n\n\n\n/*\nquery CardCharacterQuery(\n  $characterId: ID!\n) {\n  character(id: $characterId) {\n    name\n    image\n    id\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"characterId\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"characterId\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"image\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"CardCharacterQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"Character\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"character\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"CardCharacterQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"Character\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"character\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"0c2405d0c4ba70b6afb8756235cc0c69\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"CardCharacterQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query CardCharacterQuery(\\n  $characterId: ID!\\n) {\\n  character(id: $characterId) {\\n    name\\n    image\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '525043c822f7acf127ff4b5a8f68f6fc';\nexport default node;\n","import { Suspense, lazy, FC } from 'react'\nimport { Router } from '@reach/router'\n\nimport { GlobalWrapper } from './components'\nimport { homepage } from '../package.json'\n\nconst Home = lazy( () => import( './pages/Home' ) )\nconst NotFound = lazy( () => import( './pages/404' ) )\nconst Character = lazy( () => import( './pages/Character' ) )\n\n/**\n * Setup Top-Level Routes for @reach/router\n */\nconst NavigationRoutes = () => (\n  <Router basepath={homepage}>\n    <NotFound default />\n    <Home path=\"/\" />\n    <Character path=\"character/:characterId\" />\n  </Router>\n)\n\n/**\n * Since we are lazy loading for router we use Suspense as fallback\n */\nconst App:FC = () => (\n  <GlobalWrapper>\n    <Suspense fallback={<div>Loading...</div>}>\n      <NavigationRoutes />\n    </Suspense>\n  </GlobalWrapper>\n)\n\nexport default App\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById( 'root' ),\n)\n","/**\n * Helpful Resources\n * https://github.com/sibelius/create-react-app-relay-modern/blob/master/src/relay/fetchQuery.js\n * https://github.com/relay-tools/relay-compiler-language-typescript/blob/master/example/ts/app.tsx\n */\nimport { Variables } from 'react-relay'\nimport { GraphQLResponse, ObservableFromValue } from 'relay-runtime'\n\nexport const GRAPHQL_URL = 'https://rickandmortyapi.com/graphql'\n\nconst headers = {\n  Accept: 'application/json',\n  'Content-type': 'application/json',\n}\n\n// Define a function that fetches the results of a request (query/mutation/etc)\n// and returns its results as a Promise:\nconst fetchQuery = ( operation:any, variables: Variables ):ObservableFromValue<GraphQLResponse> => {\n  const body = JSON.stringify( {\n    query: operation.text, // GraphQL text from input\n    variables,\n  } )\n\n  const response = fetch(\n    GRAPHQL_URL, {\n      method: 'POST',\n      headers,\n      body,\n    },\n  ).then( res => res.json() )\n\n  return response\n}\n\nexport default fetchQuery\n","/**\n * Helpful Resources\n * https://relay.dev/docs/en/experimental/step-by-step#42-configure-relay-runtime\n */\n\nimport { Environment, Network, RecordSource, Store } from 'relay-runtime'\n\nimport fetchQuery from './fetchQuery'\n\nexport default new Environment( {\n  network: Network.create( fetchQuery ),\n  store: new Store( new RecordSource() ),\n} )\n","import { ReactNode, ElementType } from 'react'\nimport { RelayEnvironmentProvider } from 'relay-hooks'\n\nimport { Environment } from '../relay'\nimport './tailwind.output.css'\n\ninterface WrapperProps {\n  children: ReactNode\n}\n\n/**\n * Wrapper function for different Context Providers that should be available globally\n */\nconst GlobalWrapper:ElementType<WrapperProps> = ( { children }:WrapperProps ) => (\n  <RelayEnvironmentProvider environment={Environment}>\n    {children}\n  </RelayEnvironmentProvider>\n\n)\n\nexport default GlobalWrapper\n","import { FC } from 'react'\nimport graphql from 'babel-plugin-relay/macro'\nimport { useQuery } from 'relay-hooks'\n\nimport type { CardCharacterQuery } from './__generated__/CardCharacterQuery.graphql'\n\nconst query = graphql`\nquery CardCharacterQuery($characterId: ID!) {\n  character(id:$characterId) {\n    name\n    image\n  }\n}\n`\ninterface CardProps {\n  /**\n   * ID of character to show card.\n   */\n  id: string\n}\n\nconst Card:FC<CardProps> = ( { id }:CardProps ) => {\n  const { props, error } = useQuery<CardCharacterQuery>( query, { characterId: id } )\n\n  if ( props ) {\n    // For some reason the error is not getting back (showing me null) so this is a hack\n    const name = props?.character ? props?.character?.name : 'Not Found: (Some sort of server error maybe)'\n    return (\n      <div>\n        <h1 className=\"text-4xl font-bold\">{name}</h1>\n        <img alt={name || undefined} src={props?.character?.image || undefined} />\n      </div>\n    )\n  } if ( error ) return <div>{error.message}</div>\n  return <div>loading...</div>\n}\n\nexport default Card\n"],"sourceRoot":""}